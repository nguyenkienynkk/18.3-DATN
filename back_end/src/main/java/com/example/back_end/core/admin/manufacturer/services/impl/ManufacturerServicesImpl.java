package com.example.back_end.core.admin.manufacturer.services.impl;

import com.example.back_end.core.admin.manufacturer.mapper.ManufacturerMapper;
import com.example.back_end.core.admin.manufacturer.payload.request.ManufacturerRequest;
import com.example.back_end.core.admin.manufacturer.payload.response.ManufacturerResponse;
import com.example.back_end.core.admin.manufacturer.services.ManufactureServices;
import com.example.back_end.core.common.PageResponse;
import com.example.back_end.entity.Manufacturer;
import com.example.back_end.entity.Picture;
import com.example.back_end.infrastructure.exception.ResourceNotFoundException;
import com.example.back_end.repository.ManufacturerRepository;
import com.example.back_end.utils.FileStorageService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ManufacturerServicesImpl implements ManufactureServices {

    private final ManufacturerRepository manufacturerRepository;
    private final ManufacturerMapper manufacturerMapper;
    private final FileStorageService fileStorageService;
    @Override
    public ManufacturerResponse addManufacturer(MultipartFile file, ManufacturerRequest manufacturerReq)  {
        try {
            Picture picture = fileStorageService.storeFile(file);
            Manufacturer manufacturer = manufacturerMapper.toEntity(manufacturerReq);
            setPictureAttributes(picture, manufacturer.getName());
            manufacturer.setPicture(picture);
            // Save the Manufacturer entity
            manufacturerRepository.save(manufacturer);

            // Flush changes to get the ID and other autogenerated fields (if any)
            manufacturerRepository.flush();

            // Now you can retrieve the saved Manufacturer entity
            Manufacturer savedManufacturer = manufacturerRepository.findById(manufacturer.getId())
                    .orElseThrow(() -> new RuntimeException("Failed to retrieve saved Manufacturer"));

            // Optionally, map the saved entity to response DTO
            ManufacturerResponse manufacturerResponse = manufacturerMapper.toDto(savedManufacturer);

            return manufacturerResponse;
        } catch (Exception e) {
            throw new RuntimeException("Error saving manufacturer with picture", e);
        }
    }


    @Override
    public ManufacturerResponse updateManufacturer(MultipartFile file, ManufacturerRequest manufacturerRequest) {
        try {
            // Check if the ID is valid
            if (manufacturerRequest.getId() == null) {
                throw new IllegalArgumentException("Invalid ID");
            }

            // Check if the Manufacturer exists in the database
            Optional<Manufacturer> existingManufacturerOpt = manufacturerRepository.findById(manufacturerRequest.getId());
            if (existingManufacturerOpt.isEmpty()) {
                throw new IllegalArgumentException("Manufacturer not found with ID: " + manufacturerRequest.getId());
            }

            Manufacturer manufacturer = manufacturerMapper.toEntity(manufacturerRequest);

            // Handle the file if present
            if (file != null && !file.isEmpty()) {
                Picture picture = fileStorageService.storeFile(file);
                setPictureAttributes(picture, manufacturer.getName());
                manufacturer.setPicture(picture);
            } else {
                manufacturer.setPicture(existingManufacturerOpt.get().getPicture());
            }

            // Save the Manufacturer to the database
            manufacturerRepository.save(manufacturer);
            manufacturerRepository.flush();
            // Now you can retrieve the saved Manufacturer entity
            Manufacturer savedManufacturer = manufacturerRepository.findById(manufacturer.getId())
                    .orElseThrow(() -> new RuntimeException("Failed to retrieve saved Manufacturer"));

            // Optionally, map the saved entity to response DTO
            ManufacturerResponse manufacturerResponse = manufacturerMapper.toDto(savedManufacturer);
            return manufacturerResponse;
        } catch (IllegalArgumentException e) {
            // Handle specific exception
            throw e;
        } catch (Exception e) {
            // Handle other exceptions
            throw new RuntimeException("Error updating manufacturer", e);
        }
    }

    @Override
    public PageResponse<?> getAll(String name, Boolean published, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("name"));
        Page<Manufacturer> manufacturerPage = manufacturerRepository.findManufacturer(name, published, pageable);
        List<ManufacturerResponse> manufacturerList = manufacturerPage.getContent().stream()
                .map(manufacturerMapper::toDto)
                .toList();
        return PageResponse.builder()
                .page(manufacturerPage.getNumber())
                .size(manufacturerPage.getSize())
                .total(manufacturerPage.getTotalPages())
                .items(manufacturerList)
                .build();
    }

    @Override
    public ManufacturerResponse getManufacturer(Long id) {
        Optional<Manufacturer> manufacturer = manufacturerRepository.findById(id);
        return manufacturer.map(manufacturerMapper::toDto).orElseThrow(() -> new EntityNotFoundException("Entity with ID " + id + " not found."));
    }

    @Override
    public Boolean deleteManufacturer(Long id) {
        // Check if the manufacturer exists in the database
        Manufacturer manufacturer = manufacturerRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Manufacturer not found with id: " + id));

        try {
            // Delete the manufacturer using repository
            manufacturerRepository.deleteManufacturer(manufacturer.getId());
            return true;
        } catch (Exception e) {
            // Handle any exceptions that occur during deletion
            throw new RuntimeException("Failed to delete manufacturer with id " + id, e);
        }
    }
    private void setPictureAttributes(Picture picture, String manufacturerName) {
        String description = "Logo of " + manufacturerName;
        picture.setSeoFileName(description);
        picture.setAltAttribute(description);
        picture.setTitleAttribute(description);
    }
}
